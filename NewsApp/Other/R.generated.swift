//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `App`.
    static let app = Rswift.ColorResource(bundle: R.hostingBundle, name: "App")
    /// Color `ImageCaption`.
    static let imageCaption = Rswift.ColorResource(bundle: R.hostingBundle, name: "ImageCaption")
    /// Color `text`.
    static let text = Rswift.ColorResource(bundle: R.hostingBundle, name: "text")
    
    /// `UIColor(named: "App", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "ImageCaption", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func imageCaption(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.imageCaption, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `tutByHTML.txt`.
    static let tutByHTMLTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "tutByHTML", pathExtension: "txt")
    /// Resource file `vergeHTML.txt`.
    static let vergeHTMLTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "vergeHTML", pathExtension: "txt")
    
    /// `bundle.url(forResource: "tutByHTML", withExtension: "txt")`
    static func tutByHTMLTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tutByHTMLTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "vergeHTML", withExtension: "txt")`
    static func vergeHTMLTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.vergeHTMLTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Heavy`.
    static let sfProDisplayHeavy = Rswift.FontResource(fontName: "SFProDisplay-Heavy")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProText-Medium`.
    static let sfProTextMedium = Rswift.FontResource(fontName: "SFProText-Medium")
    
    /// `UIFont(name: "SFProDisplay-Heavy", size: ...)`
    static func sfProDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavy, size: size)
    }
    
    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }
    
    /// `UIFont(name: "SFProText-Medium", size: ...)`
    static func sfProTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProTextMedium, size: size)
    }
    
    static func validate() throws {
      if R.font.sfProDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Heavy' could not be loaded, is 'SF-Pro-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProText-Medium' could not be loaded, is 'SF-Pro-Text-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `bookmarkAct`.
    static let bookmarkAct = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmarkAct")
    /// Image `bookmark`.
    static let bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark")
    /// Image `detailImage`.
    static let detailImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "detailImage")
    /// Image `imageNotFound`.
    static let imageNotFound = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageNotFound")
    /// Image `image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "image")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `tutbyLogo`.
    static let tutbyLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutbyLogo")
    /// Image `upIcon`.
    static let upIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "upIcon")
    /// Image `vergeLogo`.
    static let vergeLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "vergeLogo")
    /// Image `warningIcon`.
    static let warningIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "warningIcon")
    
    /// `UIImage(named: "bookmark", bundle: ..., traitCollection: ...)`
    static func bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bookmarkAct", bundle: ..., traitCollection: ...)`
    static func bookmarkAct(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmarkAct, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "detailImage", bundle: ..., traitCollection: ...)`
    static func detailImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.detailImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageNotFound", bundle: ..., traitCollection: ...)`
    static func imageNotFound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageNotFound, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tutbyLogo", bundle: ..., traitCollection: ...)`
    static func tutbyLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutbyLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "upIcon", bundle: ..., traitCollection: ...)`
    static func upIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vergeLogo", bundle: ..., traitCollection: ...)`
    static func vergeLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vergeLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "warningIcon", bundle: ..., traitCollection: ...)`
    static func warningIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.warningIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NewsCollectionViewCell`.
    static let newsCollectionViewCell: Rswift.ReuseIdentifier<NewsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NewsCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewsDetails`.
    static let newsDetails = _R.storyboard.newsDetails()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    
    /// `UIStoryboard(name: "NewsDetails", bundle: ...)`
    static func newsDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newsDetails)
    }
    
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try news.validate()
      try newsDetails.validate()
      try root.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct news: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "News"
      let newsViewController = StoryboardViewControllerResource<NewsViewController>(identifier: "NewsViewController")
      
      func newsViewController(_: Void = ()) -> NewsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.news().newsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsViewController' could not be loaded from storyboard 'News' as 'NewsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct newsDetails: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NewsDetails"
      let newsDetailsViewController = StoryboardViewControllerResource<NewsDetailsViewController>(identifier: "NewsDetailsViewController")
      
      func newsDetailsViewController(_: Void = ()) -> NewsDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newsDetailsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bookmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bookmark' is used in storyboard 'NewsDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'NewsDetails', but couldn't be loaded.") }
        if UIKit.UIImage(named: "upIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'upIcon' is used in storyboard 'NewsDetails', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.newsDetails().newsDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newsDetailsViewController' could not be loaded from storyboard 'NewsDetails' as 'NewsDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController
      
      let bundle = R.hostingBundle
      let name = "Root"
      let rootViewController = StoryboardViewControllerResource<RootViewController>(identifier: "RootViewController")
      
      func rootViewController(_: Void = ()) -> RootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rootViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.root().rootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rootViewController' could not be loaded from storyboard 'Root' as 'RootViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
